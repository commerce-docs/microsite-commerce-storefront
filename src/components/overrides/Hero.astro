---
import { Image } from 'astro:assets';
import { PAGE_TITLE_ID } from '../constants';
import type { Props } from '@astrojs/starlight/props';
import CallToAction from './CallToAction.astro';
import { setBasePath } from '@utils/basePath';

const { data } = Astro.props.entry;
const { title = data.title, subtitle, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
  loading: 'eager' as const,
  decoding: 'async' as const,
  width: 400,
  height: 400,
  alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
  if ('file' in image) {
    darkImage = image.file;
  } else if ('dark' in image) {
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<div class="hero">
  {
    darkImage && (
      <Image
        src={darkImage}
        {...imageAttrs}
        class:list={{ 'light:sl-hidden': Boolean(lightImage) }}
      />
    )
  }
  {lightImage && <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />}
  {rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
  <div class="sl-flex stack">
    <div class="sl-flex copy">
      <h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
      {subtitle && <div class="subtitle" set:html={subtitle} />}
      {tagline && <div class="tagline" set:html={tagline} />}
    </div>
    {
      actions.length > 0 && (
        <div class="sl-flex actions">
          {actions.map(({ text, ...attrs }: { text: string; [key: string]: any }) => (
            <CallToAction
              {...attrs}
              variant={attrs.variant}
                link={attrs.link.startsWith('/') ? setBasePath(attrs.link) : attrs.link}
              set:html={text}
            />
          ))}
        </div>
      )
    }
  </div>
</div>

<style>
  .hero {
    position: relative;
    z-index: 1;
    display: grid;
    align-items: top;
    gap: 1rem;
    padding-bottom: 1.5rem;
    padding-left: 1rem;
    padding-top: 1rem;
    margin-top: -1.5rem;
    text-wrap: pretty;
  }

  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    width: 100vw;
    height: 100%; /* Match the height of the Hero component */
    transform: translateX(-50%);
    z-index: -1; /* Ensure the background is behind the content */

    /* Background styling */
    /* background: linear-gradient(
      105deg,
      hsl(59deg 100% 79%) 0%,
      hsl(297deg 47% 85%) 34%,
      hsl(290deg 90% 86%) 52%,
      hsl(263deg 88% 87%) 67%,
      hsl(213deg 99% 78%) 82%,
      hsl(212deg 100% 74%) 100%
    ); */
    background: url('./colorful-bg-dark.webp') no-repeat center center;
    background-size: cover;

    /* Ensure it doesn't overflow the viewport */
    overflow: hidden;
  }

  .hero > img,
  .hero > .hero-html {
    object-fit: contain;
    width: min(70%, 20rem);
    height: auto;
    margin-inline: auto;
  }

  .stack {
    flex-direction: column;
    gap: 1.5rem;
    /* gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem); */
    text-align: center;
    position: relative;
    z-index: 2;
    align-items: center;
  }

  .copy {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .copy > * {
    max-width: 50ch;
  }

  h1 {
    font-size: clamp(var(--sl-text-xl), calc(0.25rem + 5vw), 2.5rem);
    line-height: 2rem;
    font-weight: 900;
    color: var(--sl-color-white);
    letter-spacing: -0.02rem;
    text-wrap: balance;
  }

  .subtitle {
    font-size: clamp(var(--sl-text-xl), calc(0.25rem + 5vw), 2.5rem);
    line-height: clamp(1rem, calc(1.2rem + 1vw), 1.5rem);
    font-weight: 100;
    color: var(--sl-color-white);
    letter-spacing: 0.04rem;
  }

  .tagline {
    font-size: clamp(1.1rem, calc(1.2rem + 1vw), 1.5rem);
    line-height: clamp(1.5rem, calc(1.5rem + 1vw), 2.25rem);
    color: var(--sl-color-gray-2);
    padding-top: clamp(0.5rem, calc(0.5rem + 1vw), 1.5rem);
    max-width: 45ch;
    text-wrap: balance;
  }

  .actions {
    gap: 1rem;
  }

  @media (min-width: 50rem) {
    .hero {
      grid-template-columns: 7fr 3fr;
      gap: 5%;
      padding-block: clamp(2.5rem, calc(1rem + 5vmin), 10rem);
    }

    h1 {
      font-size: clamp(var(--sl-text-lg), calc(0.25rem + 5vw), 3rem);
      line-height: clamp(2.5rem, calc(2.5rem + 1vw), 3rem);
      font-weight: 900;
      font-size: 3rem;
      color: var(--sl-color-white);
    }

    .subtitle {
      font-size: clamp(var(--sl-text-xl), calc(0.25rem + 5vw), 2.5rem);
      line-height: clamp(1rem, 2rem, 2.25rem);
      font-weight: 200;
      color: var(--sl-color-white);
    }

    .tagline {
      font-size: clamp(1.1rem, calc(1.1rem + 1vw), 1.5rem);
      line-height: clamp(1.5rem, calc(1.5rem + 1vw), 2.25rem);
      color: var(--sl-color-gray-2);
      padding-top: 0;
    }

    .hero > img,
    .hero > .hero-html {
      order: 2;
      width: min(100%, 25rem);
    }

    .stack {
      text-align: start;
      align-items: flex-start;
    }

    .copy {
      align-items: flex-start;
    }

    .actions {
      /* justify-content: flex-start; */
    }
  }

  @media (max-width: 50rem) {
    .hero > img,
    .hero > .hero-html {
      order: 0;
      width: min(100%, 11rem);
    }

    h1 {
      font-size: clamp(var(--sl-text-lg), calc(var(--sl-text-lg) + 1.65vw), 2.5rem);
      line-height: clamp(1.5rem, calc(1.5rem + 1vw), 2.25rem);
      font-weight: 800;
      letter-spacing: 0;
      color: var(--sl-color-white);
      padding-bottom: 0;
    }
    .subtitle {
      font-size: clamp(var(--sl-text-lg), calc(var(--sl-text-lg) + 1.65vw), 2.5rem);
      line-height: clamp(1rem, calc(1rem + 1vw), 2.25rem);
      font-weight: 300;
      letter-spacing: -0.02em;
      color: var(--sl-color-white);
      padding-top: 0;
    }
    .tagline {
      font-size: clamp(1.1rem, calc(1.1rem + 1vw), 1.5rem);
      line-height: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
      padding-top: 0;
      font-weight: 400;
      max-width: 525px;
    }
  }
</style>
