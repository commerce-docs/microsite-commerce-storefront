---
import { setBasePath } from '@utils/basePath';
interface Props {
  options: (string | { text: string; link: string })[][];
  compact?: boolean;
}

const { options, compact = false } = Astro.props;
const [headers, ...rows] = options;

const cellClassName = compact ? 'compactCell' : 'cell';

const newHeaders = headers.map((header) => {
  const isCodeHeader = typeof header === 'string' && header.endsWith('(code)');
  const headerText = isCodeHeader ? header.replace('(code)', '') : header;
  const minWidthMatch = typeof headerText === 'string' ? headerText.match(/\d+px/) : null;
  const minWidth = minWidthMatch ? minWidthMatch[0] : null;
  const newHeaderText = minWidth
    ? typeof headerText === 'string'
      ? headerText.replace(minWidth, '')
      : headerText
    : headerText;

  return {
    text: newHeaderText,
    minWidth: minWidth,
  };
});

const newRows = rows.map((row) => {
  if (row.length === 0) {
    return [' ', ' ', ' ', ' '];
  } else {
    return row;
  }
});
---

<div class="optionsTable not-content">
  <table class="table">
    <thead class="tableHeader">
      <tr class="headerRow">
        {
          newHeaders.map((header) => {
            let headerClassName = 'headerCell';
            if (header.minWidth) {
              headerClassName += ` minWidth`;
            }

            return (
              <th class={headerClassName} style={{ minWidth: header.minWidth }}>
                {header.text}
              </th>
            );
          })
        }
      </tr>
    </thead>
    <tbody class="body">
      {
        newRows.map((row) => (
          <tr class="row">
            {row.map((cell, index) => {
              const isCodeCell =
                typeof headers[index] === 'string' && (headers[index] as string).endsWith('(code)');
              let cellClassNameOverride = isCodeCell
                ? compact
                  ? 'compactCodeCell'
                  : 'codeCell'
                : cellClassName;

              // Check if the cell contains a link
              if (typeof cell === 'object' && 'text' in cell && 'link' in cell) {
                return (
                  <td class={cellClassNameOverride}>
                    <a
                      class="linkColors"
                      href={cell.link.startsWith('https://') ? cell.link : setBasePath(cell.link)}
                    >
                      {cell.text}
                    </a>
                  </td>
                );
              } else {
                let isLastCell = index === row.length - 1;
                if (isLastCell) {
                  return (
                    <td class="lastCell">
                      <markdown>{cell}</markdown>
                    </td>
                  );
                }
                return <td class={cellClassNameOverride}>{cell}</td>;
              }
            })}
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<style>
  div.optionsTable {
    overflow-x: auto;
    overscroll-behavior-x: contain;
    margin-bottom: 1rem;
    margin-left: 0;
  }
  .optionsTable table.table {
    display: inline-block;
    min-width: 100%;
    table-layout: auto;
    border-collapse: collapse;
    line-height: 1.5rem;
  }

  thead.tableHeader {
    border-top: 0 none transparent;
    border-bottom: 1px solid rgb(220, 220, 220);
    padding: 1rem 1rem;
    text-align: left;
    white-space: nowrap;
  }

  tr.headerRow {
    border-top: 0 none transparent;
    border-bottom: 0.5px solid rgb(220, 220, 220);
    padding: 1rem;
    padding-bottom: 0.5rem;
    text-align: left;
    white-space: nowrap;
  }

  td.headerCell {
    border: none;
    padding: 2rem 0;
    font-weight: 600;
    white-space: nowrap;
  }

  tbody.body {
    vertical-align: baseline;
    font-size: 1rem;
    padding: 1rem 0;
  }

  tr.row {
    border-bottom: 0.5px solid rgb(220, 220, 220);
    line-height: 1.5rem;
    padding: 1rem 0;
  }

  tr td.cell {
    padding: 0.5rem 0;
    padding-right: 3rem;
    font-family: inherit;
    border-bottom: 1px solid rgb(220, 220, 220);
    white-space: nowrap;
  }

  tr td.compactCell {
    padding: 0;
    padding-right: 3rem;
    padding-left: 0.25rem;
    line-height: 1.5rem;
    border: none;
    font-family: var(--sl-font);
    border-bottom: 1px solid rgb(220, 220, 220);
    white-space: nowrap;
  }

  tr td.codeCell {
    border: none;
    white-space: pre;
    padding: 0.5rem 0.5rem;
    line-height: 1.5rem;
    font-family: var(--sl-font-mono);
    border-bottom: 1px solid rgb(220, 220, 220);
    white-space: nowrap;
  }

  tr td.compactCodeCell {
    border: none;
    white-space: pre;
    padding: 0;
    line-height: 1.5rem;
    font-family: var(--sl-font-mono);
    border-bottom: 1px solid rgb(220, 220, 220);
    white-space: nowrap;
  }

  td a {
    color: var(--sl-color-text-accent);
  }
  td td a:hover {
    color: var(--sl-color-text-accent);
  }
  td.lastCell {
    padding-bottom: 0.5rem;
  }

  @media screen and (max-width: 600px) {
    tbody.body {
      font-size: 1rem;
    }
    td.lastCell {
      font-size: 0.75rem;
    }
  }
</style>
